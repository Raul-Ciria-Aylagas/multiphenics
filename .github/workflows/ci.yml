name: multiphenics CI

on:
  push:
    branches:
      - "**"
  pull_request:
    branches:
      - master
  schedule:
    - cron: "0 21 * * SUN"
  workflow_dispatch:

jobs:
  test:
    if: >-
      (
        (
          github.event_name == 'schedule'
          && github.repository == 'multiphenics/multiphenics'
        ) || (
            github.event_name != 'schedule'
            && !(
              contains(github.event.head_commit.message, '[ci skip]')
              || contains(github.event.head_commit.message, '[skip ci]')
            )
        )
      )
    runs-on: ubuntu-latest
    container: quay.io/fenicsproject/dev
    steps:
      - uses: actions/checkout@v2
      - name: Install multiphenics
        run: |
          pip3 -q install --upgrade "flake8<4" pytest pytest-flake8 pytest-gc pytest-xdist
          PYTEST_GC_PLUGIN=$(python3 -c 'import os, pytest; print(os.path.join(os.path.dirname(pytest.__file__) + "_gc", "plugin.py"))')
          sed -i "s/fixture(scope,/fixture(scope=scope,/g" ${PYTEST_GC_PLUGIN}
          python3 setup.py -q install
          python3 -c "import multiphenics"
      - name: Run flake8 checks
        run: |
          pytest --flake8 -m flake8
      - name: Run unit tests (serial)
        run: |
          pytest -n auto tests/unit
      - name: Run unit tests (parallel)
        run: |
          mpirun -n 2 pytest --gc-disable --gc-scope function tests/unit
      - name: Run tutorials (serial)
        run: |
          pytest -n auto tutorials
      - name: Run tutorials (parallel)
        run: |
          mpirun -n 2 pytest --gc-disable --gc-scope function tutorials

  docker:
    if: github.repository == 'multiphenics/multiphenics' && github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [test]
    env:
      RELEASE_IMAGE: multiphenics/multiphenics:latest
    steps:
      - uses: actions/checkout@v2
      - name: Build the docker release image
        run: docker build --pull -t ${RELEASE_IMAGE} -f docker/Dockerfile .
      - name: Try importing the library inside the docker image
        run: docker run -i --rm ${RELEASE_IMAGE} "python3 -c 'import multiphenics'"
      - name: Run tutorials (serial) to verify that the docker image is working
        run: docker run -i --rm ${RELEASE_IMAGE} "python3 -c 'import multiphenics' && cd multiphenics && pytest -n auto tutorials"
      - name: Log into the docker registry
        run: docker login -u ${{ secrets.CI_REGISTRY_USER }} -p ${{ secrets.CI_REGISTRY_PASSWORD }}
      - name: Push to the docker registry
        run: docker push ${RELEASE_IMAGE}
